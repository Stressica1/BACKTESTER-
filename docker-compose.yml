version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: trading_platform
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: trading_user
      RABBITMQ_DEFAULT_PASS: trading_password
      RABBITMQ_DEFAULT_VHOST: trading_vhost
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/:/etc/grafana/provisioning/
    restart: unless-stopped

  # Application Services
  auth-service:
    build:
      context: .
      dockerfile: docker/auth.Dockerfile
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql+asyncpg://trading_user:trading_password@postgres:5432/trading_platform
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://trading_user:trading_password@rabbitmq:5672/trading_vhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  trading-service:
    build:
      context: .
      dockerfile: docker/trading.Dockerfile
    ports:
      - "8002:8002"
    environment:
      DATABASE_URL: postgresql+asyncpg://trading_user:trading_password@postgres:5432/trading_platform
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://trading_user:trading_password@rabbitmq:5672/trading_vhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/trading/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data-service:
    build:
      context: .
      dockerfile: docker/data.Dockerfile
    ports:
      - "8003:8003"
    environment:
      DATABASE_URL: postgresql+asyncpg://trading_user:trading_password@postgres:5432/trading_platform
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://trading_user:trading_password@rabbitmq:5672/trading_vhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/data/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  main-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://trading_user:trading_password@postgres:5432/trading_platform
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://trading_user:trading_password@rabbitmq:5672/trading_vhost
      AUTH_SERVICE_URL: http://auth-service:8001
      TRADING_SERVICE_URL: http://trading-service:8002
      DATA_SERVICE_URL: http://data-service:8003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      trading-service:
        condition: service_healthy
      data-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - main-app
      - auth-service
      - trading-service
      - data-service
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
