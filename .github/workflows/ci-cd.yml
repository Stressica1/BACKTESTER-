name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_enhanced.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_enhanced.txt
        pip install pytest pytest-asyncio pytest-cov httpx
    
    - name: Run linting
      run: |
        pip install ruff black isort
        ruff check . --output-format=github
        black --check .
        isort --check-only .
    
    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        TEST_MODE: true
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [main-app, auth-service, trading-service, data-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service == 'main-app' && 'Dockerfile' || format('docker/{0}.Dockerfile', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
    
    - name: Deploy to staging
      run: |
        # Update image tags in deployment files
        sed -i "s|trading-platform/main-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/main-app:develop|g" k8s/deployment.yaml
        sed -i "s|trading-platform/auth-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:develop|g" k8s/deployment.yaml
        sed -i "s|trading-platform/trading-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/trading-service:develop|g" k8s/deployment.yaml
        sed -i "s|trading-platform/data-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-service:develop|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/deployment.yaml
        kubectl rollout status deployment/main-app -n trading-platform --timeout=300s
        kubectl rollout status deployment/auth-service -n trading-platform --timeout=300s
        kubectl rollout status deployment/trading-service -n trading-platform --timeout=300s
        kubectl rollout status deployment/data-service -n trading-platform --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Get service URLs
        MAIN_APP_URL=$(kubectl get ingress trading-platform-ingress -n trading-platform -o jsonpath='{.spec.rules[0].host}')
        
        # Run basic health checks
        curl -f "https://${MAIN_APP_URL}/health" || exit 1
        curl -f "https://${MAIN_APP_URL}/auth/health" || exit 1
        curl -f "https://${MAIN_APP_URL}/trading/health" || exit 1
        curl -f "https://${MAIN_APP_URL}/data/health" || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
    
    - name: Deploy to production
      run: |
        # Update image tags in deployment files
        sed -i "s|trading-platform/main-app:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/main-app:latest|g" k8s/deployment.yaml
        sed -i "s|trading-platform/auth-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:latest|g" k8s/deployment.yaml
        sed -i "s|trading-platform/trading-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/trading-service:latest|g" k8s/deployment.yaml
        sed -i "s|trading-platform/data-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-service:latest|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests with rolling update
        kubectl apply -f k8s/deployment.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/main-app -n trading-platform --timeout=600s
        kubectl rollout status deployment/auth-service -n trading-platform --timeout=600s
        kubectl rollout status deployment/trading-service -n trading-platform --timeout=600s
        kubectl rollout status deployment/data-service -n trading-platform --timeout=600s
    
    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Get service URLs
        MAIN_APP_URL=$(kubectl get ingress trading-platform-ingress -n trading-platform -o jsonpath='{.spec.rules[0].host}')
        
        # Run comprehensive health and smoke tests
        curl -f "https://${MAIN_APP_URL}/health" || exit 1
        curl -f "https://${MAIN_APP_URL}/auth/health" || exit 1
        curl -f "https://${MAIN_APP_URL}/trading/health" || exit 1
        curl -f "https://${MAIN_APP_URL}/data/health" || exit 1
        
        # Additional smoke tests can be added here

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run load tests
      run: |
        # Install k6 for load testing
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run performance tests
        k6 run tests/performance/load_test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json
